(type lget ([(# cont unit int)] -> int))
(type lput ([(# cont int unit) int] -> unit))

(def state :: ([int ([lget lput] -> int)] -> int)
    ((\ [(init :: int) (f :: ([lget lput] -> int))]
        (let st :: int (inj ref init)
            (let hput :: lput
                        (\ [(k :: (# cont int unit)) (x :: int)]
                            (let _ :: unit (inj ref_set st x)
                                (resume k ())))
            (let hget :: lget
                        (\ [(k :: (# cont unit int))]
                            (resume k (inj ref_get st)))
                (try h1 hget
                    (try h2 hput
                        (@ f h1 h2)))))))
        :: ([int ([] -> int)] -> int)
    ))

(def counter :: ([lget lput] -> int)
    ((\ [(lget :: ([(# cont unit int)] -> int))
         (lput :: ([(# cont int unit) int] -> unit))]
        (let i :: int (raise lget ())
            (if (@ == i 0) 0
                (let _ :: unit (raise lput (@ - i 1)) 
                    (@ counter lget lput)))))
     :: ([lget lput] -> int)))

(def main :: ([] -> int)
    ((\ [] (@ state 100 counter))
     :: ([] -> int)))